module SessionsHelper


def log_in(user) #logs in user
session[:user_id] = user.user_id #sets the user_id key in the session hash to user id
end

  def current_user #returns the current logged in user
    if (user_id = session[:user_id]) #checks if a user is logged in
      @current_user ||= User.find_by(user_id: user_id) #tries to find current logged in user from db
    elsif (user_id = cookies.signed[:user_id]) #checks if a user provided a token to log in
      user = User.find_by(user_id: user_id) #tries to find current logged in user
      if user && user.authenticated?(cookies[:remember_token]) #searches the browser cookies for a token if the username provided existed in db
        log_in user #log user in
        @current_user = user #sets the current logged in user to that user
      end
    end
  end

def logged_in? #check if user is logged in (returns a boolean)
 !current_user.nil? #calls current user method and checks if it returned null or not
end

def log_out #log a user out
forget(current_user) #calls forget (exists in user model) to remove the user token
session.delete(:user_id) #removes the user_id key in the hash session if user isn't logged in with token
@current_user = nil #sets the current_user to null
end

def remember(user) #used to remember a user and log him in with a token only
    user.remember #calls remember(exists in model user) to generate a token , hash it and store in db
    cookies.permanent.signed[:user_id] = user.user_id #stores the user id in the browser cookies (permenant so that it never expires)
    cookies.permanent[:remember_token] = user.remember_token #stores the user given token (generated by remember) in the browser cookie
end

def forget(user) #forgets a user
    user.forget #(exists in model user) used to remove the token from the db
    cookies.delete(:user_id) #removes user_id from cookie
    cookies.delete(:remember_token) #removes the given token from the cookie
end


end
